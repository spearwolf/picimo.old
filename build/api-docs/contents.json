{ "ref": { "APP_OPTIONS": { "name": "APP_OPTIONS", "type": "programming-interface", "dictionaries": [ { "name": "APP_OPTIONS", "attributes": [ { "name": "alpha", "type": "boolean", "default": "false", "required": false }, { "name": "antialias", "type": "boolean", "default": "false" }, { "name": "canvas", "type": "HTMLCanvasElement", "default": "null" }, { "name": "appendTo", "type": "HTMLElement", "default": "null" }, { "name": "bgColor", "type": [ "string", "Picimo.utils.Color" ], "default": "'#000000'" }, { "name": "assetBaseUrl", "type": "string", "default": "null" } ] } ] }, "DISPLAY_POSITION": { "name": "DISPLAY_POSITION", "type": "programming-interface", "dictionaries": [ { "name": "DISPLAY_POSITION", "description": "The display position specifies how the picture is positioned *in relationship to the scene dimension*.\n\nMost properties will support a *string* as input. That means you can choose between different units:\n\n| Type | Format | Unit | Description |\n|------|------------|----------|---------|\n| number | _any number_ | __px__ | pixel |\n| string | `32px` | __px__ | pixel |\n| string | `100iw` | __iw__ | image width percentage |\n| string | `50.0ih` | __ih__ | image height percentage |\n| string | `-80sw` | __sw__ | scene width percentage |\n| string | `-1.1sh` | __sh__ | scene height percentage |\n| string | `100 %` | __%__ | _see property description for the unit_ |\n\n![The Display Position](/assets/images/doc/displayPosition.png)\n![The Display Position Zoom](/assets/images/doc/displayPosition zoom.png)\n", "attributes": [ { "name": "top", "type": [ "number", "string" ], "description": "Set the top edge of the image under the top edge of the parent scene.\n\nThe unit is either of **px** (if value is a *number*) or of **percantage _of scene height_** (if value is a *string* &mdash; eg. `'50%'`)\n" }, { "name": "left", "type": [ "number", "string" ], "description": "Set the left edge of the image right to the left edge of the parent scene.\n\nThe unit is either of **px** (if value is a *number*) or of **percantage _of scene width_** (if value is a *string* &mdash; eg. `'50%'`)\n" }, { "name": "bottom", "type": [ "number", "string" ], "description": "Set the bottom edge of the image above the bottom edge of the parent scene.\n\nThe unit is either of **px** (if value is a *number*) or of **percantage _of scene height_** (if value is a *string* &mdash; eg. `'50%'`)\n" }, { "name": "right", "type": [ "number", "string" ], "description": "Set the right edge of the image left to the right edge of the parent scene.\n\nThe unit is either of **px** (if value is a *number*) or of **percantage _of scene width_** (if value is a *string* &mdash; eg. `'50%'`)\n" }, { "name": "width", "type": [ "number", "string" ], "description": "Set the width of the image.\n\nThe unit is either of **px** (if value is a *number*) or of **percantage _of image width_** (if value is a *string* &mdash; eg. `'50%'`)\n" }, { "name": "height", "type": [ "number", "string" ], "description": "Set the height of the image.\n\nThe unit is either of **px** (if value is a *number*) or of **percantage _of image height_** (if value is a *string* &mdash; eg. `'50%'`)\n" }, { "name": "zoom", "type": "number", "description": "Set the zoom factor.\n\nDefault is `1.0` (no zoom). If set to `2.0` the size of the image will be _doubled_.\n" }, { "name": "anchorX", "type": "number", "description": "TODO" }, { "name": "anchorY", "type": "number", "description": "TODO" } ] } ] }, "NODE_OPTIONS": { "name": "NODE_OPTIONS", "type": "programming-interface", "dictionaries": [ { "name": "NODE_OPTIONS", "attributes": [ { "name": "renderPrio", "type": "number", "required": false, "default": "0", "description": "The render priority of this node. Defaults to `0`." }, { "name": "display", "type": "number", "required": false, "default": true, "description": "The initial display state. Defaults to `true`." }, { "name": "ready", "type": [ "boolean", "function" ], "required": false, "default": true, "description": "The initial ready state. Defaults to `true`." }, { "name": "name", "type": "string", "required": false, "description": "The name of the node." }, { "name": "parentNode", "type": "Picimo.graph.Node", "required": false, "description": "When not set then this node will be acting as root node." }, { "name": "onInit", "type": "function", "required": false }, { "name": "onInitGl", "type": "function", "required": false }, { "name": "onFrame", "type": "function", "required": false }, { "name": "onRenderFrame", "type": "function", "required": false }, { "name": "onFrameEnd", "type": "function", "required": false }, { "name": "onDestroyGl", "type": "function", "required": false }, { "name": "onDestroy", "type": "function", "required": false }, { "name": "onChildrenUpdated", "type": "function", "required": false } ] } ] }, "OBJECT_FIT": { "name": "OBJECT_FIT", "type": "programming-interface", "enums": [ { "name": "OBJECT_FIT", "description_after_idl": "![The Object Fit Property](/assets/images/doc/displaySize.png)\n\nThe object fit describes how an object size is computed in relation to its container area.\n\n- **contain** will always show the whole object but may not fill up the whole area.\n- **cover** will always fill the whole area, but the object may be cropped.\n\nBoth strategies will preserve the object size ratio.\n", "values": [ { "name": "contain" }, { "name": "cover" } ] } ] }, "PICTURE_OPTIONS": { "name": "PICTURE_OPTIONS", "type": "programming-interface", "dictionaries": [ { "name": "PICTURE_OPTIONS", "extends": [ "NODE_OPTIONS" ], "attributes": [ { "name": "texture", "type": [ "Picimo.core.Texture", "Promise<picimo.core.texture>" ], "required": true, "description": "The texture is mandatory. If you don't specify a texture you will see nothing." }, { "name": "sceneFit", "type": "OBJECT_FIT", "default": "'contain'", "description": "You should specify either of *sceneFit* or *displayPosition*.\nIf both properties are *not* specified the *sceneFit* will be set to `'contain'`.\nSee [OBJECT_FIT](#) for more information.\n" }, { "name": "displayPosition", "type": "DISPLAY_POSITION", "description": "The *displayPosition* property has precedence over the *sceneFit* property.\nWhen specified the *sceneFit* property will be ignored.\n" }, { "name": "zoom", "type": "number", "default": "1" }, { "name": "posX", "type": "number", "default": "0" }, { "name": "posY", "type": "number", "default": "0" }, { "name": "opacity", "type": "number", "default": "1" } ] } ] }, "Picimo.App": { "name": "Picimo.App", "type": "programming-interface", "interfaces": [ { "name": "Picimo.App", "description": "This is your starting point.\n", "attributes": [ { "separator": true, "title": "scene graph" }, { "name": "scene", "type": "Picimo.graph.Scene", "readonly": true, "description": "The *root* scene node of the picimo scene graph." }, { "separator": true, "title": "time/frame info" }, { "name": "now", "type": "number", "description": "The number of seconds from application start.", "readonly": true }, { "name": "frameNo", "type": "number", "description": "The current frame number.", "readonly": true }, { "separator": true, "title": "asset/urls" }, { "name": "assetBaseUrl", "type": "string", "nullable": true, "description": "The base url for all assets. *Maybe* be undefined. The base url can be set via the __assetBaseUrl__\n*option* or via the global var `PICIMO_ASSET_BASE_URL` (will override the option).\nIf unspecified the base url will be calculated from `locaation.href`\n" }, { "separator": true, "title": "canvas/webgl/context info" }, { "name": "canvas", "type": "HTMLCanvasElement", "readonly": true, "description": "The `<canvas>` dom element." }, { "name": "canvasIsPredefined", "type": "boolean", "readonly": true }, { "name": "backgroundColor", "type": "Picimo.utils.Color", "description": "The default background color is _black_ or if you set the __alpha__ option then _transparent_ is used." }, { "name": "width", "type": "number", "readonly": true, "description": "The _device_ pixel width." }, { "name": "height", "type": "number", "readonly": true, "description": "The _device_ pixel height." } ], "functions": [ { "separator": true, "title": "textures" }, { "name": "loadTextureAtlas", "args": [ { "name": "url", "type": "string" } ], "returns": "Promise<picimo.core.textureatlas>" }, { "name": "loadTexture", "args": [ { "name": "url", "type": "string" } ], "returns": "Promise<picimo.core.texture>" }, { "separator": true, "title": "url helpers" }, { "name": "getAssetUrl", "args": [ { "name": "url", "type": "string" } ], "returns": "string" }, { "name": "joinAssetUrl", "args": [ { "name": "baseUrl", "type": "string" }, { "name": "url", "type": "string" } ], "returns": "string" }, { "separator": true, "title": "sprites" }, { "name": "defineSprite", "args": [ { "name": "name", "type": "string" }, { "name": "descriptor", "type": "VERTEX_OBJECT_DESCRIPTION" }, { "name": "proto", "type": "object" } ], "returns": "Picimo.core.VertexObjectDescriptor" }, { "name": "createSprite", "args": [ { "name": "name", "type": "string" } ], "returns": "Picimo.core.VertexObject" }, { "separator": true, "title": "shader" }, { "name": "defineVertexShader", "args": [ { "name": "name", "type": "string" }, { "name": "source", "type": "string" } ], "returns": "Picimo.App" }, { "name": "defineFragmentShader", "args": [ { "name": "name", "type": "string" }, { "name": "source", "type": "string" } ], "returns": "Picimo.App" }, { "name": "loadVertexShader", "args": [ { "name": "name", "type": "string" }, { "name": "url", "type": "string" } ], "returns": "Promise<picimo.render.shadersource>" }, { "name": "loadFragmentShader", "args": [ { "name": "name", "type": "string" }, { "name": "url", "type": "string" } ], "returns": "Promise<picimo.render.shadersource>" }, { "name": "getVertexShader", "args": [ { "name": "name", "type": "string" } ], "returns": "Picimo.render.ShaderSource" }, { "name": "getFragmentShader", "args": [ { "name": "name", "type": "string" } ], "returns": "Picimo.render.ShaderSource" }, { "name": "addProgram", "args": [ { "name": "name", "type": "string" }, { "name": "vertexShaderName", "type": "string" }, { "name": "fragmentShaderName", "type": "string" } ], "returns": "Picimo.App" }, { "name": "getProgram", "args": [ { "name": "name", "type": "string" } ], "returns": "Picimo.render.Program" } ], "constructor": { "args": [ { "name": "canvas", "type": "HTMLCanvasElement", "nullable": true, "optional": true }, { "name": "options", "type": "APP_OPTIONS", "nullable": true, "optional": true } ] }, "events": [ { "name": "init", "description": "Will be called right after app creation time.\n" }, { "name": "resize", "description": "Canvas resized.\n" }, { "name": "frameBegin", "description": "The frame begins.\n" }, { "name": "frame", "description": "On frame event. The renderer has been initialized,\nbut this is before the scene graph is rendered.\n" }, { "name": "renderFrame", "description": "On frame event. The renderer has been initialized\nand the scene graph is executed but the renderer is not yet finished,\nso this is the last call to create render commands if wanted.\n" }, { "name": "frameEnd", "description": "The frame ends.\n" } ] } ] }, "Picimo.graph.Node": { "name": "Picimo.graph.Node", "type": "programming-interface", "interfaces": [ { "name": "Picimo.graph.Node", "description": "The base class for all other picimo scene graph nodes.\n", "description_after_events": "#### Node States and Events\n<img src='\"/assets/images/doc/node-events.png\"' srcset='\"/assets/images/doc/node-events.png' 1x,="" assets="" images="" doc="" node-events@2x.png="" 2x\"="" alt='\"Node' events="" and="" states\"="">\n", "attributes": [ { "name": "name", "type": "string", "description": "The node name is optional. You can search for a node by name with `findNode()`." }, { "separator": true, "title": "scene graph" }, { "name": "app", "type": "Picimo.App", "readonly": true, "description": "The picimo app instance." }, { "name": "parentNode", "type": "Picimo.graph.Node", "readonly": true, "description": "The parent node or `null`." }, { "name": "isRootNode", "type": "boolean", "readonly": true, "description": "Returns `parent == null`" }, { "name": "renderPrio", "type": "number", "description": "Die render priority bestimmt die Reihenfolge in der die Nodes\nmittels `renderFrame()` aufgerufen werden.\n" }, { "name": "children", "type": "Picimo.graph.Node[]", "readonly": false, "description": "Every node can have children.\n" }, { "separator": true, "title": "state" }, { "name": "state", "type": "Picimo.graph.NodeState" }, { "name": "ready", "type": "boolean", "description": "When set to `false` this node will be ignored by *initialization* and *rendering* process.\n" }, { "name": "readyFunc", "type": "function", "description": "Accepts a boolean value or a function. When the ready function returns a *truthy* value then this is node is *ready*.\n" }, { "name": "display", "type": "boolean", "description": "When set to `false` the node will not be displayed. The *frame*, *renderFrame* and *frameEnd* events will not be called.\nBUT `init` and `initGl` will be called. If you don't want to initialize the node set the *ready* attribute to `false`.\n" } ], "functions": [ { "name": "appendChild", "args": [ { "name": "node", "type": "Picimo.graph.Node" } ], "returns": "Picimo.graph.Node" }, { "name": "removeChild", "args": [ { "name": "node", "type": "Picimo.graph.Node" } ], "returns": "Picimo.graph.Node" }, { "name": "findNode", "args": [ { "name": "name", "type": "string" } ], "returns": "Picimo.graph.Node" }, { "name": "renderFrame", "returns": "void" }, { "name": "destroy", "returns": "void" } ], "constructor": { "args": [ { "name": "app", "type": "Picimo.App", "nullable": false, "optional": false }, { "name": "options", "type": "NODE_OPTIONS", "nullable": true, "optional": true } ] }, "events": [ { "name": "init", "args": [ { "name": "done", "type": "function" } ], "description": "Initialize your node!\nWhen your *init is __async__* call `done()` with your `Promise` as first argument.\n" }, { "name": "initGl", "args": [ { "name": "done", "type": "function" } ], "description": "Initialize webgl resources here if needed!\nWhen your *init is __async__* call `done()` with your `Promise` as first argument.\n" }, { "name": "childrenUpdated", "description": "A child node was added or removed." }, { "name": "frame", "description": "A new frame begins!" }, { "name": "renderFrame", "description": "Time to create your render commands here!" }, { "name": "frameEnd", "description": "The frame ends. All your children completed the frame." }, { "name": "destroyGl", "description": "Free all your webgl resources!" }, { "name": "destroy", "description": "Destroy or release all additional resources allocated by this node." } ] } ] }, "Picimo.graph.Picture": { "name": "Picimo.graph.Picture", "type": "programming-interface", "interfaces": [ { "name": "Picimo.graph.Picture", "extends": [ "Picimo.graph.Node" ], "constructor": { "args": [ { "name": "app", "type": "Picimo.App", "nullable": false, "optional": false }, { "name": "options", "type": "PICTURE_OPTIONS", "nullable": true, "optional": true } ] }, "attributes": [ { "name": "displayPosition", "type": "DISPLAY_POSITION", "description": "Describe the position where the picture is placed on the scene.\nWhen set the *sceneFit* property will be ignored.\n" }, { "name": "sceneFit", "type": "OBJECT_FIT", "description": "Describe how the picture dimension should be computed in relation to the scene dimension.\nThis property has no effect if the *displayPosition* property is defined.\n" }, { "name": "scale", "type": "number", "description": "scale factor *(default is 1.0)*" }, { "name": "opacity", "type": "number", "description": "opacity as value *[0..1]*" }, { "name": "rotate", "type": "number", "description": "rotation in radian" }, { "name": "rotateDegree", "type": "number", "description": "rotation in degree" }, { "name": "posX", "type": [ "number", "string" ], "description": "The horizontal position. Supports all the units from [DISPLAY_POSITION](#).\n" }, { "name": "posY", "type": [ "number", "string" ], "description": "The vertical position. Supports all the units from [DISPLAY_POSITION](#).\n" }, { "name": "program", "type": "string", "default": "picture", "description": "The shader program name." }, { "name": "texture", "type": "Picimo.core.Texture", "description": "The texture used to render the sprite." } ], "functions": [ { "name": "setPos", "returns": "Picimo.graph.Picture", "args": [ { "name": "x", "type": [ "number", "string" ] }, { "name": "y", "type": [ "number", "string" ] } ] }, { "name": "setScale", "returns": "Picimo.graph.Picture", "args": [ { "name": "scale", "type": "number" } ] }, { "name": "setVertexPositions", "returns": "void", "args": [ { "name": "x0", "type": "number" }, { "name": "y0", "type": "number" }, { "name": "x1", "type": "number" }, { "name": "y1", "type": "number" }, { "name": "x2", "type": "number" }, { "name": "y2", "type": "number" }, { "name": "x3", "type": "number" }, { "name": "y3", "type": "number" } ] } ] } ] }, "Picimo.graph.Scene": { "name": "Picimo.graph.Scene", "type": "programming-interface", "interfaces": [ { "name": "Picimo.graph.Scene", "extends": [ "Picimo.graph.Node" ], "description": "![Scene Coordinate System](/assets/images/doc/coordinates.png)", "attributes": [ { "name": "scene", "type": "Picimo.graph.Scene", "readonly": true, "description": "The parent scene. Every scene has a parent scene &mdash; unless the root scene &mdash; for the root scene this value is `undefined`." }, { "name": "projection", "type": "Picimo.math.Matrix4", "readonly": true, "description": "The projection matrix." }, { "name": "hasOwnProjection", "type": "boolean", "readonly": true }, { "name": "projectionNeedsUpdate", "type": "boolean", "readonly": false }, { "name": "transform", "type": "Picimo.math.Matrix4", "description": "The local transformation matrix. Change it to pan or zoom or whatever you want with the scene." }, { "name": "blendMode", "type": "Picimo.render.cmd.BlendMode", "readonly": false }, { "name": "sizeFit", "type": "OBJECT_FIT", "readonly": false, "description": "The size fit property describes how the scene dimension is computed\nin relation to the scene container. When there is no containing scene the\napp viewport is used instead.\n" }, { "name": "width", "type": "number", "readonly": true }, { "name": "height", "type": "number", "readonly": true }, { "name": "pixelRatio", "type": "number", "readonly": true }, { "name": "devicePixelRatio", "type": "number", "readonly": true } ], "functions": [ { "name": "setSize", "args": [ { "name": "width", "type": "number" }, { "name": "height", "type": "number" }, { "name": "sizeFit", "type": "OBJECT_FIT", "default": "'contain'", "optional": true } ], "returns": "Picimo.graph.Scene" }, { "name": "setBlendMode", "args": [ { "name": "depthTest", "type": "boolean" }, { "name": "depthMask", "type": "boolean" }, { "name": "depthFunc", "type": "string", "optional": true }, { "name": "blend", "type": "boolean", "optional": true }, { "name": "blendFuncSrc", "type": "string", "optional": true }, { "name": "blendFuncDst", "type": "string", "optional": true } ], "returns": "Picimo.render.cmd.BlendMode" }, { "separator": true, "title": "Scene graph node factories" }, { "name": "appendScene", "args": [ { "name": "options", "type": "SCENE_OPTIONS" } ], "returns": "Picimo.graph.Scene" }, { "name": "appendPicture", "args": [ { "name": "url", "type": "string" }, { "name": "options", "type": "PICTURE_OPTIONS" } ], "returns": "Picimo.graph.Picture" }, { "name": "appendSpriteGroup", "args": [ { "name": "textureAtlas", "type": [ "Picimo.core.TextureAtlas", "Promise" ] }, { "name": "options", "type": "SPRITE_GROUP_OPTIONS" } ], "returns": "Picimo.graph.SpriteGroup" } ], "constructor": { "args": [ { "name": "app", "type": "Picimo.App", "nullable": false, "optional": false }, { "name": "options", "type": "SCENE_OPTIONS", "nullable": true, "optional": true } ] } } ] }, "Picimo.graph.SpriteGroup": { "name": "Picimo.graph.SpriteGroup", "type": "programming-interface", "interfaces": [ { "name": "Picimo.graph.SpriteGroup", "extends": [ "Picimo.graph.Node" ], "description": "A sprite group renders a group of sprites to the scene.\nAll vertex data will be will be uploaded to the GPU *every frame*.\nSo that's why you should choose the capacity carefully.\n", "attributes": [ { "name": "textureAtlas", "type": "Picimo.core.TextureAtlas" }, { "name": "program", "type": "string", "description": "The gl program name." }, { "name": "spriteDescriptor", "type": "Picimo.core.VertexObjectDescriptor", "description": "The sprite descriptor." }, { "name": "pool", "type": "Picimo.core.VertexObjectPool", "description": "The sprite objects pool." }, { "name": "defaultSpriteWidth", "type": "number" }, { "name": "defaultSpriteHeight", "type": "number" } ], "functions": [ { "name": "setDefaultSpriteSize", "args": [ { "name": "width", "type": "number" }, { "name": "height", "type": "number" } ], "returns": "void" }, { "name": "createSprite", "args": [ { "name": "texture", "type": "string", "optional": true }, { "name": "width", "type": "number", "optional": true }, { "name": "height", "type": "number", "optional": true } ], "returns": "Picimo.core.VertexObject" } ], "constructor": { "args": [ { "name": "app", "type": "Picimo.App", "nullable": false, "optional": false }, { "name": "options", "type": "SPRITE_GROUP_OPTIONS", "nullable": true, "optional": true } ] } } ] }, "SCENE_OPTIONS": { "name": "SCENE_OPTIONS", "type": "programming-interface", "dictionaries": [ { "name": "SCENE_OPTIONS", "extends": [ "NODE_OPTIONS" ], "attributes": [ { "name": "width", "type": "number", "required": false }, { "name": "height", "type": "number", "required": false }, { "name": "pixelRatio", "type": "number", "required": false }, { "name": "sizeFit", "type": "OBJECT_FIT", "required": false, "default": "'contain'", "description": "The size fit option describes how the scene dimension is computed\nin relation to the scene container.\n" }, { "name": "projection", "type": "boolean", "required": false, "default": "true" }, { "name": "blendMode", "type": "Picimo.render.cmd.BlendMode", "required": false }, { "name": "onResize", "type": "function", "required": false }, { "name": "onProjectionUpdated", "type": "function", "required": false } ] } ] }, "SPRITE_GROUP_OPTIONS": { "name": "SPRITE_GROUP_OPTIONS", "type": "programming-interface", "dictionaries": [ { "name": "SPRITE_GROUP_OPTIONS", "extends": [ "NODE_OPTIONS" ], "attributes": [ { "name": "textureAtlas", "type": "Picimo.core.TextureAtlas", "required": true }, { "name": "capacity", "type": "number", "required": false, "default": 1000, "description": "The max sprite count.\n" }, { "name": "program", "type": "string", "required": false, "default": "'picimo.sprite'" }, { "name": "sprites", "type": "string", "required": false, "default": "'sprite'", "description": "The vertex object descriptor name.\n\nA sprite group expects that a sprite instance (created by the vertex object descriptor)\nhas the following properties:\n\n| Type | Definition | Required | Comment |\n|------|------------|----------|---------|\n| Method | `setTexCoords(x0, y0, x1, y1, x2, y2, x3, y3)` | yes | |\n| Method | `setSize(w, h)` | yes | _px_ |\n| Method | `setScale(sx, sy)` | no | Either this or `scale=` |\n| Property | `scale=` | no | Either this or `setScale(..)` |\n| Property | `opacity=` | no | _[0..1]_ |\n" }, { "name": "defaultWidth", "type": "number", "required": false, "description": "The default sprite width." }, { "name": "defaultHeight", "type": "number", "required": false, "description": "The default sprite height." } ] } ] }, "VERTEX_OBJECT_DESCRIPTION": { "name": "VERTEX_OBJECT_DESCRIPTION", "type": "programming-interface", "dictionaries": [ { "name": "VERTEX_OBJECT_DESCRIPTION", "attributes": [ { "name": "constructor", "type": "function", "required": false, "description": "Constructor function for your sprite" }, { "name": "vertexCount", "type": "number", "required": true, "description": "Number of vertices per sprite" }, { "name": "vertexAttrCount", "type": "number", "required": true, "description": "Number of attributes per vertex" }, { "name": "attributes", "type": "Array", "required": true, "description": "Sprite attributes description" }, { "name": "alias", "type": "object", "required": false, "description": "Attribute alias descriptions" }, { "name": "proto", "type": "object", "required": false, "description": "The prototype object for your sprite" } ] } ] }, "app-setup": { "title": "App Setup", "type": "guide", "fileBaseName": "App_Setup", "name": "app-setup", "html": "<p>Der Anfang von allem. Das ist der <strong>Main Controller</strong> deiner App.\nDer einfachste Weg eine App Instanz zu erzeugen ist mittels</p>\n<p><code>let app = new Picimo.App;</code></p>\n<h4 id='\"options-are-optional\"'>Options are optional</h4>\n<p>Options werden einfach an den Constructor als erstes Argument überreicht ..</p>\n<p><code>let app = new Picimo({ canvas: document.getElementById(&#39;myCanvas&#39;) });</code></p>\n<h4 id='\"canvas-setup\"'>Canvas Setup</h4>\n<p>Picimo benötigt ein <code>&lt;canvas&gt;</code> Element zur Anzeige. Dieses kann mittels <code>canvas</code> option\noder einfach als ersten Parameter an den Constructor übergeben werden.</p>\n<p><code>let app = new Picimo.App(myCanvas/* , options */);</code></p>\n<p>Wird kein Canvas angegeben, erzeugt die App instance einfach selbst einen eigenen Canvas.\nDieser wird unterhalb <code>document.body</code> eingehängt oder alternativ kann der Container mit der Option <code>appendTo</code> bestimmt werden.</p>\n<p>Dieser automatisch erzeugte Canvas richtet seine Größe dynamisch an seinem Container Element (parentNode) aus.\nDer Container sollte also eine eigene Größe haben.</p>\n<p>Im Gegensatz dazu wird die Canvas Element Größe <em>niemals</em> von der App verändert,\nwenn ein schon bestehendes Canvas (zB. per <code>canvas</code> option) verwendet wird.</p>\n<h4 id='\"background-color-transparency-\"'>Background (color/transparency)</h4>\n<p>Mit der Option <code>alpha: true</code> kann ein transparenter Canvas erzeugt werden. Mit <code>backgroundColor</code> kann alternativ\neine Hintergrundfarbe bestimmt werden.</p>\n<h4 id='\"events-and-state-changes\"'>Events and State Changes</h4>\n<p>While registering function callbacks with <code>app.on()</code> you can hook into the different app state changes\n(like <em>init</em>, <em>resize</em> or <em>renderFrame</em> .. )</p>\n<p>Picimo is using the <a href='\"https://github.com/spearwolf/eventize\"' alt='\"spearwolf/eventize\"' class='\"md__link\"'>spearwolf/eventize</a> library.</p>\n<h4 id='\"glx-gl-renderer-states\"'>glx/gl/renderer states</h4>\n<p>TODO</p>\n<h4 id='\"assets-shader-texture-sprite-factories-helpers\"'>assets/shader/texture/sprite factories/helpers</h4>\n<p>TODO</p>\n<h4 id='\"timing-frameno-state\"'>timing/frameNo state</h4>\n<p>TODO</p>\n<h4 id='\"scene-graph-root\"'>scene graph root</h4>\n<p>TODO</p>\n<h4 id='\"plugin-support\"'>plugin support</h4>\n<ul>\n<li><code>App.on(&#39;create&#39;)</code></li>\n</ul>\n" }, "internal-coding-guidelines": { "title": "Internal Coding Guidelines", "type": "topic", "tags": [ "advanced" ], "fileBaseName": "Internal_Coding_Guidelines", "name": "internal-coding-guidelines", "html": "<h4 id='\"app-renderer-glx-and-gl-properties\"'>app, renderer, glx and gl properties</h4>\n<p>Various notes and coding hints to make your life easier.</p>\n<ul>\n<li><strong>app</strong> or <strong>glx</strong> can be cached for later usage</li>\n<li>but <em>never</em> cache <strong>renderer</strong> or <strong>gl</strong> as instance properties</li>\n</ul>\n" }, "the-rendering-pipeline": { "title": "The Rendering Pipeline", "type": "topic", "tags": [ "advanced" ], "fileBaseName": "The_Rendering_Pipeline", "name": "the-rendering-pipeline", "html": "<p>Here are some big picture overviews &mdash; you probably won&#39;t need to know the details &mdash;\nbut it could help if you want to understand a little bit more about the internal rendering flow.</p>\n<p><img src='\"/assets/images/doc/picimo-rendering-pipeline.png\"' srcset='\"/assets/images/doc/picimo-rendering-pipeline.png' 1x\"="" alt='\"Picimo' rendering="" pipeline\"=""></p>\n<p>The following diagram describes the data flow for uniform values.</p>\n<p><img src='\"/assets/images/doc/picimo-renderer-uniforms.png\"' srcset='\"/assets/images/doc/picimo-renderer-uniforms.png' 1x\"="" alt='\"Picimo' uniform="" data="" flows\"=""></p>\n" } }, "package": { "name": "picimo", "version": "0.0.14", "author": { "name": "Wolfger Schramm", "email": "wolfger@spearwolf.de", "url": "https://github.com/spearwolf" }, "repository": { "type": "git", "url": "https://github.com/spearwolf/picimo.git" }, "license": "Apache-2.0", "homepage": "https://github.com/spearwolf/picimo/", "bugs": { "url": "https://github.com/spearwolf/picimo/issues" } }, "programming-interface": [ "APP_OPTIONS", "DISPLAY_POSITION", "NODE_OPTIONS", "OBJECT_FIT", "PICTURE_OPTIONS", "Picimo.App", "Picimo.graph.Node", "Picimo.graph.Picture", "Picimo.graph.Scene", "Picimo.graph.SpriteGroup", "SCENE_OPTIONS", "SPRITE_GROUP_OPTIONS", "VERTEX_OBJECT_DESCRIPTION" ], "guide": [ "app-setup" ], "topic": [ "internal-coding-guidelines", "the-rendering-pipeline" ] }</picimo.render.shadersource></picimo.render.shadersource></picimo.core.texture></picimo.core.textureatlas></canvas></picimo.core.texture>